{"version":3,"file":"types.d.js","names":[],"sources":["../src/types.d.ts"],"sourcesContent":["export interface IType<T> extends Function {\r\n    new (...args: any[]): T;\r\n}\r\nexport type FunctionType = (...args: any[]) => void;\r\nexport type PlainFunctionType = () => void;\r\nexport type AnyClass = new(...args: any[]) => any;\r\nexport interface IKeyValueList {\r\n  [key: string]: any;\r\n}\r\nexport interface IVector2 extends ISerializable {\r\n  x: number;\r\n  y: number;\r\n  normalize(): IVector2;\r\n}\r\nexport interface IVector3 extends ISerializable {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\nexport interface IRaycastHint {\r\n  ray: IRay2D;\r\n  distance: number;\r\n  collider: ICollider;\r\n}\r\nexport interface ICollider extends IComponent {\r\n  transform: ITransform2D;\r\n  raycast(): void;\r\n  raycast(ray: IRay2D): IRaycastHint;\r\n}\r\nexport interface ITransform2D {\r\n  position: IVector2;\r\n  scale: IVector2;\r\n  rotate: IVector3;\r\n}\r\nexport interface IRay2D extends ISerializable {\r\n  origin: IVector2;\r\n  direction: IVector2;\r\n  getPoint(distantion: number): IVector2;\r\n}\r\nexport interface IVariousConfig {\r\n  [key: string]: any;\r\n}\r\nexport type RectSetType = [number, number, number, number];\r\nexport interface IDisposableObject {\r\n  dispose: FunctionType;\r\n}\r\nexport type IDisposable = PlainFunctionType | IDisposableObject;\r\nexport type THook = FunctionType;\r\n\r\nexport interface IPlugin {\r\n  onUpdate(): void;\r\n  onFixedUpdate(): void;\r\n  onUI(): void;\r\n}\r\n\r\nexport interface ICanvas2DApi {\r\n  strokeStyle: string;\r\n  beginPath: () => void;\r\n  moveTo: (x: number, y: number) => void;\r\n  lineTo: (x: number, y: number) => void;\r\n  stroke: () => void;\r\n}\r\n\r\nexport interface ISerializable {\r\n  deserialize(data: object): void;\r\n  serialize(): any;\r\n}\r\n\r\nexport interface IBaseModule extends ISerializable {\r\n  removeHook(hookType: string, hookToRemove: THook): void;\r\n  addHook(hookType: string, hook: THook): IDisposable;\r\n  triggerHooks(hookType: string, args?: any[]): void;\r\n  registerHookTypes(hookTypes: string[]): void;\r\n  destroy(): void;\r\n}\r\n\r\nexport interface IGameObject extends IBaseModule {\r\n  name: string;\r\n  transform: ITransform2D;\r\n  scene: IScene;\r\n  updateFrameStamp: number;\r\n  onStart(): void;\r\n  onUpdate(): void;\r\n  onFixedUpdate(): void;\r\n  onUI(): void;\r\n  findComponent(componentClass: IType<IComponent>): IComponent;\r\n}\r\n\r\nexport interface ICollection<T> extends Array<T> {\r\n  push(...items: T[]): number;\r\n}\r\n\r\nexport interface IScene extends IBaseModule {\r\n  gameObjects: ICollection<IGameObject>;\r\n  name: string;\r\n  app: IApplication;\r\n  getMainCamera(): ICamera;\r\n  onStart(): void;\r\n  onUpdate(): void;\r\n  onUI(): void;\r\n  onFixedUpdate(): void;\r\n}\r\n\r\nexport interface IComponent extends IBaseModule {\r\n  gameObject: IGameObject;\r\n  onStart(): void;\r\n  onUpdate(): void;\r\n  onFixedUpdate(): void;\r\n  onUI(): void;\r\n}\r\n\r\nexport interface ICamera extends IComponent {\r\n  gameObject: IGameObject;\r\n  worldToViewportPoint(point: IVector2): IVector2;\r\n  applyTransform(): void;\r\n  getVectorPerspective(position: IVector2): IVector2;\r\n  viewportPointToRay2D(point: IVector2): IRay2D;\r\n}\r\n\r\nexport interface IApplication extends IBaseModule {\r\n  renderer: IRenderer;\r\n  activeScene: IScene;\r\n  activeCamera: ICamera;\r\n  findPlugin(PluginClass: any): IPlugin;\r\n}\r\n\r\nexport interface IApplicationConfig {\r\n  physics?: {\r\n    fixedUpdateTime?: number,\r\n  };\r\n}\r\n\r\nexport interface IApplicationState {\r\n  canvas: object;\r\n  time: {\r\n    fixedDeltaTime: number,\r\n  };\r\n}\r\n\r\nexport interface IRenderer extends IBaseModule {\r\n  element: HTMLElement;\r\n  context: CanvasRenderingContext2D;\r\n  onUpdate: (deltaTime: number) => void;\r\n  onUI: (deltaTime: number) => void;\r\n  translate2D(position: IVector2): any;\r\n  cancelTranslate2D(position: IVector2): any;\r\n  transform2D(transform: ITransform2D): any;\r\n  cancelTransform2D(transform: ITransform2D): any;\r\n  getViewportDimension(): IVector2;\r\n  start: () => void;\r\n}\r\n\r\nexport interface IHTMLCanvas2DRendererConfig {\r\n  maxFps?: number;\r\n  autoSize?: boolean;\r\n}\r\n\r\nexport interface IFields {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface ITime {\r\n  deltaTime: number;\r\n  fixedDeltaTime: number;\r\n}\r\n"],"mappings":""}