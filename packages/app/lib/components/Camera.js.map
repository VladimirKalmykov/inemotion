{"version":3,"file":"Camera.js","names":["Camera","Component","constructor","gameObject","applyTransform","scene","app","renderer","cancelTransform2D","transform","worldToViewportPoint","point","dimension","getViewportDimension","modifiedPoint","scaleWorldToCameraViewPoint","x","position","y","Vector2","viewportToWorlPoint","scaledPoint","scaleCameraViewToWorldPoint","getVectorPerspective","camera","angle","getAngle","distance","getDistance","relativePoint","getPointAtAngle","modX","scale","modY","viewportPointToRay2D","Ray2D","zero"],"sources":["../../src/components/Camera.ts"],"sourcesContent":["import { IGameObject, Component, Vector2, ICamera, Ray2D } from \"@inemotion/core\";\r\n\r\nexport default class Camera extends Component implements ICamera {\r\n  constructor(gameObject: IGameObject) {\r\n    super(gameObject);\r\n  }\r\n\r\n  /** Apply camera transform to canvas context transform */\r\n  public applyTransform() {\r\n    this.gameObject.scene.app.renderer.cancelTransform2D(this.gameObject.transform);\r\n  }\r\n\r\n  /** Convert world point to viewport point */\r\n  public worldToViewportPoint(point: Vector2) {\r\n    const dimension = this.gameObject.scene.app.renderer.getViewportDimension();\r\n    const modifiedPoint = this.scaleWorldToCameraViewPoint(point);\r\n\r\n    const x = (dimension.x / 2) - this.gameObject.transform.position.x + modifiedPoint.x;\r\n    const y = (dimension.y / 2) - this.gameObject.transform.position.y + modifiedPoint.y;\r\n\r\n    return new Vector2(\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  /** Convert world point to viewport point */\r\n  public viewportToWorlPoint(point: Vector2) {\r\n    const dimension = this.gameObject.scene.app.renderer.getViewportDimension();\r\n    const scaledPoint = this.scaleCameraViewToWorldPoint(point);\r\n\r\n    const x = (dimension.x / 2) + this.gameObject.transform.position.x + scaledPoint.x;\r\n    const y = (dimension.y / 2) + this.gameObject.transform.position.y + scaledPoint.y;\r\n\r\n    return new Vector2(\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  /** Get 2D offset of the point in the camera perspective view */\r\n  public getVectorPerspective(point: Vector2): Vector2 {\r\n    const camera = this.gameObject.transform.position;\r\n    const angle = Vector2.getAngle(camera, point);\r\n    const distance = Vector2.getDistance(camera, point);\r\n    const relativePoint = Vector2.getPointAtAngle(angle, distance);\r\n    const modX = relativePoint.x - (relativePoint.x * this.gameObject.transform.scale.x);\r\n    const modY  = relativePoint.y - (relativePoint.y * this.gameObject.transform.scale.y);\r\n    return new Vector2(\r\n      modX,\r\n      modY,\r\n    );\r\n  }\r\n\r\n  /* Transform point from world to viewport depends on camera scale */\r\n  public scaleWorldToCameraViewPoint(point: Vector2): Vector2 {\r\n    const scale = this.gameObject.transform.scale;\r\n    return new Vector2(\r\n      point.x * scale.x,\r\n      point.y * scale.y,\r\n    );\r\n  }\r\n\r\n  /* Transform point from viewport to world depends on camera scale */\r\n  public scaleCameraViewToWorldPoint(point: Vector2): Vector2 {\r\n    const scale = this.gameObject.transform.scale;\r\n    return new Vector2(\r\n      point.x / scale.x,\r\n      point.y / scale.y,\r\n    );\r\n  }\r\n\r\n  public viewportPointToRay2D(point: Vector2): Ray2D {\r\n    return new Ray2D(\r\n      this.viewportToWorlPoint(point),\r\n      Vector2.zero,\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}