{"version":3,"file":"Application.js","names":["Application","BaseModule","activeCamera","_activeCamera","_activeScene","getMainCamera","value","constructor","renderer","plugins","userPlugins","scenes","startSceneId","physics","Collection","map","Scene","Physics","onUpdate","activeScene","onFixedUpdate","plugin","time","deltaTime","fixedDeltaTime","length","push","HTMLCanvas2DRenderer","applyTransform","onUI","startScene","getSceneByName","getSceneByIndex","nextActiveScene","includes","Error","scene","triggerHooks","app","addPlugin","PluginClass","config","removePlugin","pluginToRemove","index","findIndex","destroy","splice","findPlugin","find","name","start","onStart"],"sources":["../src/Application.ts"],"sourcesContent":["import {\r\n  IType,\r\n  BaseModule,\r\n  Collection,\r\n  Plugin,\r\n  IRenderer,\r\n  IScene,\r\n  IApplication,\r\n  ITime,\r\n  ICamera,\r\n} from \"@inemotion/core\";\r\nimport HTMLCanvas2DRenderer from \"./HTMLCanvas2DRenderer\";\r\nimport Scene from \"./Scene\";\r\nimport Physics from \"./modules/Physics\";\r\n\r\nexport default class Application extends BaseModule implements IApplication {\r\n  public static serialazableFields = [\r\n    \"renderer\",\r\n    \"plugins\",\r\n    \"scenes\",\r\n    \"startSceneIndex\",\r\n  ];\r\n  public static hookTypes = [\r\n    \"set-active-scene\",\r\n    \"change-active-scene\",\r\n  ];\r\n  /** Reference to the application HTML DOM element */\r\n  public element: HTMLElement;\r\n  /** Collection of plugins */\r\n  public plugins: Collection<Plugin>;\r\n  /** Collection of scenes */\r\n  public scenes: Collection<Scene>;\r\n  /** Current renderer */\r\n  public renderer: IRenderer;\r\n  /** Index of scene, that will be used as game entry */\r\n  public startSceneId: number;\r\n  /** Time represents rendering time stats */\r\n  public time: ITime;\r\n  /** Reference to the active scene */\r\n  private _activeCamera: ICamera;\r\n  public get activeCamera(): ICamera {\r\n    if (!this._activeCamera) {\r\n      if (this._activeScene) {\r\n        this._activeCamera = this._activeScene.getMainCamera();\r\n      }\r\n    }\r\n    return this._activeCamera;\r\n  }\r\n  public set activeCamera(value: ICamera) {\r\n    this._activeCamera = value;\r\n  }\r\n  private physics: Physics;\r\n  private _activeScene: IScene;\r\n\r\n  public constructor({\r\n    renderer = {},\r\n    plugins: userPlugins = [],\r\n    scenes = [],\r\n    startSceneId = 0,\r\n    physics = {},\r\n  } = {}) {\r\n    super();\r\n\r\n    this.plugins = new Collection<Plugin>(userPlugins);\r\n\r\n    this.scenes = new Collection<Scene>(scenes.map(() => new Scene()));\r\n\r\n    this.physics = new Physics(physics);\r\n\r\n    /** Define physics update handler */\r\n    this.physics.onUpdate = () => {\r\n      this.activeScene.onFixedUpdate();\r\n\r\n      for (const plugin of this.plugins) {\r\n        plugin.onFixedUpdate();\r\n      }\r\n    };\r\n\r\n    /* Represents time stats */\r\n    this.time = {\r\n      get deltaTime(): number {\r\n        return this.renderer.deltaTime;\r\n      },\r\n      get fixedDeltaTime(): number {\r\n        return this.physics.deltaTime;\r\n      },\r\n    };\r\n\r\n    /* Unsure the scenes contains at least one scene */\r\n    if (this.scenes.length === 0) {\r\n      this.scenes.push(new Scene());\r\n    }\r\n\r\n    /* Default renderer */\r\n    this.renderer = new HTMLCanvas2DRenderer(renderer);\r\n\r\n    /** Define renderer update handler */\r\n    this.renderer.onUpdate = () => {\r\n      this.activeCamera.applyTransform();\r\n      this.activeScene.onUpdate();\r\n\r\n      for (const plugin of this.plugins) {\r\n        plugin.onUpdate();\r\n      }\r\n    };\r\n\r\n    this.renderer.onUI = () => {\r\n       this.activeScene.onUI();\r\n\r\n       for (const plugin of this.plugins) {\r\n         plugin.onUI();\r\n       }\r\n    };\r\n\r\n    /* Ensure that start scene index or name is real */\r\n    let startScene: Scene = typeof startSceneId === \"string\"\r\n      ? this.getSceneByName(startSceneId)\r\n      : this.getSceneByIndex(startSceneId);\r\n\r\n    if (!startScene) {\r\n      startScene = this.scenes[0];\r\n    }\r\n\r\n    /* Set active scene by the default */\r\n    this.activeScene = startScene;\r\n  }\r\n\r\n  get activeScene() {\r\n    return this._activeScene;\r\n  }\r\n\r\n  set activeScene(nextActiveScene: IScene) {\r\n    /* Reset active camera */\r\n    this.activeCamera = null;\r\n    // Handle nextActiveScene as number\r\n    if (!this.scenes.includes(nextActiveScene)) {\r\n      throw new Error(\"Active scene should be in application scenes\");\r\n    }\r\n    const scene = nextActiveScene;\r\n\r\n    if (!this._activeScene) {\r\n      this.triggerHooks(\"set-active-scene\", [scene]);\r\n    } else {\r\n      this.triggerHooks(\"change-active-scene\", [scene]);\r\n    }\r\n\r\n    this._activeScene = scene;\r\n\r\n    // scene\r\n    scene.app = this;\r\n\r\n    // Set activeCamers\r\n    this.activeCamera = scene.getMainCamera();\r\n  }\r\n\r\n  /** Add plugin to an application */\r\n  public addPlugin(PluginClass: IType<Plugin>, config: any) {\r\n    const plugin = new PluginClass(this, config);\r\n    this.plugins.push(plugin);\r\n    return plugin;\r\n  }\r\n\r\n  /** Remove plugin from an application */\r\n  public removePlugin(pluginToRemove: Plugin) {\r\n    const index = this.plugins.findIndex((plugin) => plugin === pluginToRemove);\r\n    if (index > -1) {\r\n      pluginToRemove.destroy();\r\n      this.plugins.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /** Find plugin by its class */\r\n  public findPlugin(PluginClass: any): Plugin {\r\n    return this.plugins.find((plugin) => plugin instanceof PluginClass);\r\n  }\r\n\r\n  /** Get scene by index */\r\n  public getSceneByIndex(index: number) {\r\n    return this.scenes[index];\r\n  }\r\n\r\n  /** Get scene by name */\r\n  public getSceneByName(name: string) {\r\n    return this.scenes.find((scene: Scene) => scene.name === name);\r\n  }\r\n\r\n  /** Start game rendering and physics */\r\n  public start() {\r\n    /* Start active scene */\r\n    this.activeScene.onStart();\r\n\r\n    /* Start each plugin */\r\n    for (const plugin of this.plugins) {\r\n      plugin.onStart();\r\n    }\r\n    /* Start fixed updates */\r\n    this.physics.start();\r\n    this.renderer.start();\r\n  }\r\n\r\n //\r\n //  findObjectsAtPosition(x, y) {\r\n //    let results = [];\r\n //    const axis = this.getCanvasAxis();\r\n //    for (let i = 0; i < this.gameObjects.length; i++) {\r\n //      const collider = this.gameObjects[i].getComponent(components.Collider);\r\n //      if (collider) {\r\n //        const objectStartX = axis.x + this.gameObjects[i].transform.position.x;\r\n //        const objectStartY = axis.y + this.gameObjects[i].transform.position.y;\r\n //        const colliderRect = collider.getRelativePositionRect();\r\n //        if (\r\n //          (colliderRect[0] + axis.x) < x\r\n //          && (colliderRect[1] + axis.y) < y\r\n //          && (colliderRect[2] + axis.x) > x\r\n //          && ((colliderRect[3] + axis.y)) > y\r\n //        ) {\r\n //          results.push(this.gameObjects[i]);\r\n //        }\r\n //      }\r\n //    }\r\n //\r\n //    return results;\r\n //  }\r\n //\r\n //  /**\r\n //   * Handle Canvas start rendering\r\n //   **/\r\n //  canvasReadyHandler = (ctx, {\r\n //    canvas\r\n //  }) => {\r\n //    canvas.addEventListener(\"mousedown\", this.handleMouseDown);\r\n //    this.canvas = canvas;\r\n //  }\r\n //\r\n //  /* Handle canvas render update */\r\n //  canvasUpdateHandler = (ctx, renderer) => {\r\n //    // Reset axis\r\n //    ctx.translate(this.config.canvas.axis.x, this.config.canvas.axis.y);\r\n //    this.runHook(\"before-update\", [ctx])\r\n //    for (let i = 0; i < this.gameObjects.length; i++) {\r\n //      this.gameObjects[i].render(ctx, this);\r\n //    }\r\n //    this.runHook(\"after-update\", [ctx])\r\n //\r\n //    this.fixedDeltaTime += renderer.deltaTime;\r\n //    if (this.fixedDeltaTime >= (1000 / this.config.physic.ups)) {\r\n //      for (let i = 0; i < this.gameObjects.length; i++) {\r\n //        this.gameObjects[i].fixedUpdate();\r\n //      }\r\n //      this.runHook(\"fixed-update\", [this.fixedDeltaTime])\r\n //      this.fixedDeltaTime = 0;\r\n //    }\r\n //  }\r\n //\r\n //  /**\r\n //   * Handle Canvas destroy\r\n //   **/\r\n //  canvasDestroyHandler = ({\r\n //    canvas\r\n //  }) => {\r\n //    canvas.removeEventListener(\"mousedown\", this.handleMouseDown);\r\n //  }\r\n //\r\n //  /**\r\n //   * Input\r\n //   **/\r\n // handleMouseDown = e => {\r\n //   const clickedAt = this.findObjectsAtPosition(e.clientX, e.clientY);\r\n //   this.previousMousePageX = e.clientX;\r\n //   this.previousMousePageY = e.clientY;\r\n //   if (clickedAt.length > 0) {\r\n //     this.touchedObject = clickedAt[0];\r\n //   }\r\n //   window.addEventListener(\"mouseup\", this.handleMouseUp);\r\n //   this.canvas.addEventListener(\"mousemove\", this.handleMouseMove);\r\n // }\r\n // handleMouseMove = e => {\r\n //   const deltaX = e.clientX - this.previousMousePageX;\r\n //   const deltaY = e.clientY - this.previousMousePageY;\r\n //   this.previousMousePageX = e.clientX;\r\n //   this.previousMousePageY = e.clientY;\r\n //\r\n //   if (this.touchedObject) {\r\n //     this.touchedObject.transform.position.x += deltaX;\r\n //     this.touchedObject.transform.position.y += deltaY;\r\n //     this.touchedObject.runHook(\"updated\");\r\n //   }\r\n // }\r\n // handleMouseUp = () => {\r\n //   window.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n //   this.canvas.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n //   if (this.touchedObject) {\r\n //     this.touchedObject = null;\r\n //   }\r\n // }\r\n}\r\n"],"mappings":"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"}